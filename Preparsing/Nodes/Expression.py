# --------------------------------------------------------------------------------------------------
# ----------------------- PRE-PARSING :: Abstract-Base Expression-Node Class -----------------------
# --------------------------------------------------------------------------------------------------
from .. Visitors.Visitor import Visitor
from .. Lexer.Token      import Token
from  . Node import  Node

from typing import TypeVar
R = TypeVar('R')


# --------------------------------------------------------------------------------------------------
# -------------------------- CLASS :: Abstract-Base Expression-Node Class --------------------------
# --------------------------------------------------------------------------------------------------
class Expression(Node):

    # ------------------------------------------------------------------------------------------
    # -------------------------------- ATTRIBUTES :: Attributes --------------------------------
    # ------------------------------------------------------------------------------------------


    # ------------------------------------------------------------------------------------------
    # ------------------------------ CONSTRUCTION :: Construction ------------------------------
    # ------------------------------------------------------------------------------------------
    def __init__(self) -> None:
        ...


    # ------------------------------------------------------------------------------------------
    # --------------------------- STRINGIFICATION :: Stringification ---------------------------
    # ------------------------------------------------------------------------------------------
    def __repr__(self) -> str:
        ...

    def __str__(self) -> str:
        ...


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITATION :: Accept Visitor ------------------------------
    # ------------------------------------------------------------------------------------------
    def accept(self, visitor: Visitor[R]) -> R:
        return visit.visit_expression(self)


    # ------------------------------------------------------------------------------------------
    # ------------------------------ PROPERTIES :: Bounds of Node ------------------------------
    # ------------------------------------------------------------------------------------------
    @property
    def start(self) -> Token:
        ...

    @property
    def end(self) -> Token:
        ...