# --------------------------------------------------------------------------------------------------
# --------------------------- PRE-PARSING :: Abstract Base Visitor Class ---------------------------
# --------------------------------------------------------------------------------------------------
from typing import TYPE_CHECKING
from typing import Generic
from typing import TypeVar

if TYPE_CHECKING:
    from .. Nodes.Alternation   import Alternation
    from .. Nodes.Annotation    import Annotation
    from .. Nodes.Assignment    import Assignment
    from .. Nodes.Call          import Call
    from .. Nodes.Concatenation import Concatenation
    from .. Nodes.Definition    import Definition
    from .. Nodes.Error         import Error
    from .. Nodes.Expression    import Expression
    from .. Nodes.Identifier    import Identifier
    from .. Nodes.Literal       import Literal
    from .. Nodes.Node          import Node
    from .. Nodes.Number        import Number
    from .. Nodes.Optional      import Optional
    from .. Nodes.Output        import Output
    from .. Nodes.Parenthetical import Parenthetical
    from .. Nodes.Plus          import Plus
    from .. Nodes.Production    import Production
    from .. Nodes.Pseudo        import Pseudo
    from .. Nodes.Root          import Root
    from .. Nodes.Sequence      import Sequence
    from .. Nodes.Signature     import Signature
    from .. Nodes.Star          import Star
    from .. Nodes.String        import String

R = TypeVar('R')


# --------------------------------------------------------------------------------------------------
# ------------------------------ CLASS :: Abstract Base Visitor Class ------------------------------
# --------------------------------------------------------------------------------------------------
class Visitor(Generic[R]):

    # ------------------------------------------------------------------------------------------
    # -------------------------------- ATTRIBUTES :: Attributes --------------------------------
    # ------------------------------------------------------------------------------------------


    # ------------------------------------------------------------------------------------------
    # ------------------------------- CONSTRUCTOR :: Constructor -------------------------------
    # ------------------------------------------------------------------------------------------
    def __init__(self) -> None:
        ...


    # ------------------------------------------------------------------------------------------
    # --------------------------- STRINGIFICATION :: Stringification ---------------------------
    # ------------------------------------------------------------------------------------------
    def __repr__(self) -> str:
        return f"Visitor()"

    def __str__(self)  -> str:
        return f"Visitor()"


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITOR :: Visit Alternation ------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_alternation(self, node: 'Alternation') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITOR :: Visit Annotation -------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_annotation(self, node: 'Annotation') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITOR :: Visit Assignment -------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_assignment(self, node: 'Assignment') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # --------------------------------- VISITOR :: Visit Call ----------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_call(self, node: 'Call') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ----------------------------- VISITOR :: Visit Concatenation -----------------------------
    # ------------------------------------------------------------------------------------------
    def visit_concatenation(self, node: 'Concatenation') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITOR :: Visit Definition -------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_definition(self, node: 'Definition') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # --------------------------------- VISITOR :: Visit Error ---------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_error(self, node: 'Error') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITOR :: Visit Expression -------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_expression(self, node: 'Expression') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITOR :: Visit Expression -------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_generic(self, node: 'Node') -> R:
        ...


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITOR :: Visit Identifier -------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_identifier(self, node: 'Identifier') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # -------------------------------- VISITOR :: Visit Literal --------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_literal(self, node: 'Literal') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # -------------------------------- VISITOR :: Visit Number ---------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_number(self, node: 'Number') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ------------------------------- VISITOR :: Visit Optional --------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_optional(self, node: 'Optional') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # -------------------------------- VISITOR :: Visit Output ---------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_output(self, node: 'Output') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ----------------------------- VISITOR :: Visit Parenthetical -----------------------------
    # ------------------------------------------------------------------------------------------
    def visit_parenthetical(self, node: 'Parenthetical') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # --------------------------------- VISITOR :: Visit Plus ----------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_plus(self, node: 'Plus') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITOR :: Visit Production -------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_production(self, node: 'Production') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # -------------------------------- VISITOR :: Visit Pseudo ---------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_pseudo(self, node: 'Pseudo') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # --------------------------------- VISITOR :: Visit Root ----------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_root(self, node: 'Root') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # ------------------------------- VISITOR :: Visit Sequence --------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_sequence(self, node: 'Sequence') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # -------------------------- VISITOR :: Visit Negative-Lookahead ---------------------------
    # ------------------------------------------------------------------------------------------
    def visit_signature(self, node: 'Signature') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # --------------------------------- VISITOR :: Visit Star ----------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_star(self, node: 'Star') -> R:
        return self.visit_generic(node)


    # ------------------------------------------------------------------------------------------
    # -------------------------------- VISITOR :: Visit String ---------------------------------
    # ------------------------------------------------------------------------------------------
    def visit_string(self, node: 'String') -> R:
        return self.visit_generic(node)