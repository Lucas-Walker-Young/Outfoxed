# --------------------------------------------------------------------------------------------------
# ------------------------------- PRE-PARSING :: Concatenation Node --------------------------------
# --------------------------------------------------------------------------------------------------
from .. Visitors.Visitor import Visitor
from .. Lexer.Token      import Token

from .  Expression  import Expression
from .  Error       import Error

from typing import TypeVar
R = TypeVar('R')


# --------------------------------------------------------------------------------------------------
# ---------------------------------- CLASS :: Concatenation Node -----------------------------------
# --------------------------------------------------------------------------------------------------
class Concatenation(Expression):

    # ------------------------------------------------------------------------------------------
    # -------------------------------- ATTRIBUTES :: Attributes --------------------------------
    # ------------------------------------------------------------------------------------------
    expressions: tuple[Error | Expression, ...]


    # ------------------------------------------------------------------------------------------
    # ------------------------------ CONSTRUCTION :: Construction ------------------------------
    # ------------------------------------------------------------------------------------------
    def __init__(self, expressions: tuple[Error | Expression, ...]) -> None:
        self.expressions = expressions


    # ------------------------------------------------------------------------------------------
    # --------------------------- STRINGIFICATION :: Stringification ---------------------------
    # ------------------------------------------------------------------------------------------
    def stringify(self) -> str:

        expressions = ', '.join(f"'{e.__class__.__name__}'" for e in self.expressions)
        return f"Concatenation({expressions})"

    def __repr__(self) -> str:
        return self.stringify()

    def __str__(self) -> str:
        return self.stringify()


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITATION :: Accept Visitor ------------------------------
    # ------------------------------------------------------------------------------------------
    def accept(self, visitor: Visitor[R]) -> R:
        return visitor.visit_concatenation(self)


    # ------------------------------------------------------------------------------------------
    # ------------------------------ PROPERTIES :: Bounds of Node ------------------------------
    # ------------------------------------------------------------------------------------------
    @property
    def start(self) -> Token:
        return self.expressions[0].start

    @property
    def end(self) -> Token:
        return self.expressions[-1].end