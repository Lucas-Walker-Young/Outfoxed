# --------------------------------------------------------------------------------------------------
# ------------------------------------ PRE-PARSING :: Root Node ------------------------------------
# --------------------------------------------------------------------------------------------------
from .. Visitors.Visitor import Visitor
from .. Lexer.Token      import Token

from .  Sequence import Sequence
from .  Node     import Node
from .  Error    import Error

from typing import TypeVar
R = TypeVar('R')


# --------------------------------------------------------------------------------------------------
# --------------------------------------- CLASS :: Root Node ---------------------------------------
# --------------------------------------------------------------------------------------------------
class Root(Node):

    # ------------------------------------------------------------------------------------------
    # -------------------------------- ATTRIBUTES :: Attributes --------------------------------
    # ------------------------------------------------------------------------------------------
    definitions : Error | Sequence
    origin      : str


    # ------------------------------------------------------------------------------------------
    # ------------------------------ CONSTRUCTION :: Construction ------------------------------
    # ------------------------------------------------------------------------------------------
    def __init__(self, origin: str, definitions: Error | Sequence) -> None:

        self.origin      = origin
        self.definitions = definitions


    # ------------------------------------------------------------------------------------------
    # --------------------------- STRINGIFICATION :: Stringification ---------------------------
    # ------------------------------------------------------------------------------------------
    def __repr__(self) -> str:
        return f"Root('{self.origin}')"

    def __str__(self) -> str:
        return f"Root('{self.origin}')"


    # ------------------------------------------------------------------------------------------
    # ------------------------------ VISITATION :: Accept Visitor ------------------------------
    # ------------------------------------------------------------------------------------------
    def accept(self, visitor: Visitor[R]) -> R:
        return visitor.visit_root(self)


    # ------------------------------------------------------------------------------------------
    # ------------------------------ PROPERTIES :: Bounds of Node ------------------------------
    # ------------------------------------------------------------------------------------------
    @property
    def start(self) -> Token:
        return self.definitions[-0].start

    @property
    def end(self) -> Token:
        return self.definitions[-1].end